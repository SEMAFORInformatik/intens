
#include "datapool/DataValue.h"

/*=============================================================================*/
/* Initialisation                                                              */
/*=============================================================================*/

BUG_INIT_COUNT(DataValue);

/*=============================================================================*/
/* Constructor / Destructor                                                    */
/*=============================================================================*/

DataValue::DataValue( DATAAttributeMask mask )
  : m_attr_mask( mask ){
  BUG_INCR_COUNT;
}

DataValue::~DataValue(){
  BUG_DECR_COUNT;
}

/*=============================================================================*/
/* member functions                                                            */
/*=============================================================================*/

/* --------------------------------------------------------------------------- */
/* isValid --                                                                  */
/* --------------------------------------------------------------------------- */

bool DataValue::isValid() const{
  return (m_attr_mask & DATAisValid) != 0;
}

/* --------------------------------------------------------------------------- */
/* isInvalid --                                                                */
/* --------------------------------------------------------------------------- */

bool DataValue::isInvalid() const{
  return (m_attr_mask & DATAisValid) == 0;
}

/* --------------------------------------------------------------------------- */
/* setValid --                                                                 */
/* --------------------------------------------------------------------------- */

void DataValue::setValid(){
  setAttributes( DATAisValid, 0 );
}

/* --------------------------------------------------------------------------- */
/* setInvalid --                                                               */
/* --------------------------------------------------------------------------- */

void DataValue::setInvalid(){
  setAttributes( 0, DATAisValid );
}

/* --------------------------------------------------------------------------- */
/* isLocked --                                                                 */
/* --------------------------------------------------------------------------- */

bool DataValue::isLocked() const{
  return (m_attr_mask & DATAisLocked) != 0;
}

/* --------------------------------------------------------------------------- */
/* setLocked --                                                                */
/* --------------------------------------------------------------------------- */

void DataValue::setLocked(){
  setAttributes( DATAisLocked, 0 );
}

/* --------------------------------------------------------------------------- */
/* setUnlocked --                                                              */
/* --------------------------------------------------------------------------- */

void DataValue::setUnlocked(){
  setAttributes( 0, DATAisLocked );
}

/* --------------------------------------------------------------------------- */
/* getStructValue --                                                           */
/* --------------------------------------------------------------------------- */

const DataStructValue &DataValue::getStructValue() const{
  assert( false );
  throw( 0 );
}

/* --------------------------------------------------------------------------- */
/* getAttributes --                                                            */
/* --------------------------------------------------------------------------- */

DATAAttributeMask DataValue::getAttributes() const{
  return m_attr_mask;
}

/* --------------------------------------------------------------------------- */
/* setAttributes --                                                            */
/* --------------------------------------------------------------------------- */

void DataValue::setAttributes( DATAAttributeMask set_mask, DATAAttributeMask reset_mask ){
  m_attr_mask = m_attr_mask | set_mask;
  if( reset_mask != 0 ){
    m_attr_mask = ( m_attr_mask | reset_mask ) ^ reset_mask;
  }
}
