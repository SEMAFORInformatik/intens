# enable typed triggers.
# NB this is needed to modify the libvirt domain scsi controller model to virtio-scsi.
ENV['VAGRANT_EXPERIMENTAL'] = 'typed_triggers'

VM_CPUS = 4
VM_MEMORY_MB = 4*1024
VM_OS_DISK_GB = 100

require 'open3'

Vagrant.configure(2) do |config|
  # config.vm.box = 'windows-2022-amd64'
  #config.vm.box = 'windows-2022-uefi-amd64'
  #config.vm.box = 'windows-2025-amd64'
  #config.vm.box = 'windows-2025-uefi-amd64'
  config.vm.box = 'windows-11-24h2-amd64'
  #config.vm.box = 'windows-11-24h2-uefi-amd64'

  config.vm.hostname = 'example'

  config.vm.provider 'libvirt' do |lv, config|
    lv.default_prefix = "#{File.basename(File.dirname(File.dirname(__FILE__)))}_example_"
    lv.memory = VM_MEMORY_MB
    lv.cpus = VM_CPUS
    lv.socket = '/var/run/libvirt/libvirt-sock'
    lv.cpu_mode = 'host-passthrough'
    lv.keymap = 'pt'
    lv.nested = true
    lv.disk_bus = 'scsi'
    lv.disk_device = 'sda'
    lv.disk_driver :discard => 'unmap', :cache => 'unsafe'
    lv.machine_virtual_size = VM_OS_DISK_GB
    lv.graphics_type = 'spice'
    lv.graphics_ip = '127.0.0.1'
    lv.graphics_autoport = 'no'
    lv.graphics_port = '-1'
    # config.trigger.before :'VagrantPlugins::ProviderLibvirt::Action::StartDomain', type: :action do |trigger|
    #   trigger.ruby do |env, machine|
    #     # modify the scsi controller model to virtio-scsi.
    #     # see https://github.com/vagrant-libvirt/vagrant-libvirt/pull/692
    #     # see https://github.com/vagrant-libvirt/vagrant-libvirt/issues/999
    #     stdout, stderr, status = Open3.capture3(
    #       'virt-xml', machine.id,
    #       '--edit', 'type=scsi',
    #       '--controller', 'model=virtio-scsi')
    #     if status.exitstatus != 0
    #       raise "failed to run virt-xml to modify the scsi controller model. status=#{status.exitstatus} stdout=#{stdout} stderr=#{stderr}"
    #     end
    #   end
    # end
    # config.vm.synced_folder '.', '/vagrant',
    #   type: 'smb',
    #   smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
    #   smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
  end
  #config.vm.provision "windows-sysprep" # NB the windows-sysprep plugin does not work with hyperv.
  config.vm.provision "shell", path: "ps.ps1", args: "expand-os-partition.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "provision-chocolatey.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "provision-adk.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "mount-system-partition.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "provision-tools.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "provision-build-deps.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "summary.ps1"
end
